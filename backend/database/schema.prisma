// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  log      = ["query"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String          @id @unique @default(uuid())
  email     String          @unique
  password  String
  salt      Bytes
  role      enumRole
  verified  Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?
  supplier  Supplier?
  address   AccountAddress?

  @@map("accounts")
}

model User {
  id         String     @id @unique @default(uuid())
  account    Account?   @relation(fields: [accountId], references: [id])
  accountId  String?    @unique
  firstName  String
  lastName   String
  supplier   Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  watchlist  Watchlist?
  cart       Cart?
  order      Order[]
  Review     Review[]

  @@map("users")
}

model Supplier {
  id           String     @id @unique @default(uuid())
  account      Account?   @relation(fields: [accountId], references: [id])
  accountId    String?    @unique
  companyName  String
  companyPhone String     @default("")
  companyBio   String
  slug         String     @unique
  featured     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User[]
  offer        Offer[]
  Review       Review[]
  Category     Category[]

  @@map("suppliers")
}

model Image {
  id        String        @id @unique @default(uuid())
  imageUrl  String        @default("")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  type      enumImageType
  ownerId   String
  ownerType enumRole

  @@map("images")
}

model AccountAddress {
  id            String   @id @unique @default(uuid())
  account       Account  @relation(fields: [accountId], references: [id])
  accountId     String   @unique
  country       String
  city          String
  streetAddress String
  zip           String
  state         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("account_addresses")
}

model Review {
  id         String    @id @unique @default(uuid())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @unique
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?   @unique
  rating     Int
  comment    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("reviews")
}

model Offer {
  id          String     @id @unique @default(uuid())
  title       String
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  supplierId  String
  price       Float
  unit        String
  amount      Int
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  watchlist   Watchlist? @relation(fields: [watchlistId], references: [id])
  watchlistId String?    @unique
  cart        Cart?      @relation(fields: [cartId], references: [id])
  cartId      String?
  order       Order[]

  @@map("offers")
}

model Watchlist {
  id        String   @id @unique @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  offer     Offer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("watchlists")
}

model Cart {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  offer     Offer[]
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Order {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Category {
  id         String    @id @unique @default(uuid())
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  offer      Offer[]
  Supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?

  @@map("categories")
}

model ResetPassword {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resetPassword")
}

model EmailVerification {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emailVerification")
}

enum enumRole {
  BUYER
  SUPPLIER
  ADMIN
  EMPLOYEE
}

enum enumImageType {
  PROFILE
  FACILITY
  OFFER
  CATEGORY
}
