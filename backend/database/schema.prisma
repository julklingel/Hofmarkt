// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String    @id @unique @default(uuid())
  email      String    @unique
  password   String
  salt       Bytes
  role       enumRole
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @unique
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?   @unique

  @@map("accounts")
}

model User {
  id             String          @id @unique @default(uuid())
  account        Account?
  firstName      String
  lastName       String
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  supplierId     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  watchlist      Watchlist[]
  cart           Cart[]
  order          Order[]
  AccountAddress AccountAddress?
  Review         Review[]

  @@map("users")
}

model Supplier {
  id             String          @id @unique @default(uuid())
  account        Account?
  companyName    String
  companyLogo    String          @default("")
  companyPhone   String          @default("")
  companyBio     String
  slug           String          @unique
  featured       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User[]
  offer          Offer[]
  AccountAddress AccountAddress?
  Review         Review[]
  SupplierImage  SupplierImage[]

  @@map("suppliers")
}

model SupplierImage {
  id         String   @id @unique @default(uuid())
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String
  imageUrl   String   @default("Placeholder Image?")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @default("profile") // profile, gallery, cover

  @@map("supplier_images")
}

model AccountAddress {
  id            String    @id @unique @default(uuid())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @unique
  supplier      Supplier? @relation(fields: [supplierId], references: [id])
  supplierId    String?   @unique
  country       String
  city          String
  streetAddress String
  zip           String
  state         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("account_addresses")
}

model Review {
  id         String   @id @unique @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

model Offer {
  id         String      @id @unique @default(uuid())
  title      String
  img        String
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  supplierId String
  price      Float
  unit       String
  amount     Int
  category   Category[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  watchlist  Watchlist[]
  cart       Cart[]
  order      Order[]

  @@map("offers")
}

model Watchlist {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("watchlists")
}

model Cart {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Order {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Category {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offer     Offer[]

  @@map("categories")
}

model ResetPassword {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  token     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum enumRole {
  BUYER
  SUPPLIER
  ADMIN
  EMPLOYEE
}
